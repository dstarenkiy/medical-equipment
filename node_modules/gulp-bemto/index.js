var Stream = require('readable-stream');
var StreamQueue = require('streamqueue');
var fs = require('fs');
var path = require('path');

// Files with this line are ignored.
var extString = 'extends';

// Read from file
function readfile(filename) {
    return fs.readFileSync(path.dirname(__filename) + filename, {
        encoding: 'utf8'
    });
}

var BEM_CONTENT = (readfile('/bemto.jade')) + "\nmixin i(data1, data2, data3)\n	- var data = {}\n	- var redefines = []\n	- if (typeof data1 === 'object') redefines.push(data1)\n	- if (typeof data2 === 'object') redefines.push(data2)\n	- if (typeof data3 === 'object') redefines.push(data3)\n	- for (var i in redefines)\n		- for (var k in redefines[i])\n			- if (redefines[i].hasOwnProperty(k))\n				- data[k] = redefines[i][k]\n	- data._bemto_chain = bemto_chain.slice()\n	- data._bemto_chain_contexts = bemto_chain_contexts.slice()\n	- data._bemto_regex_element = bemto_regex_element\n	- var blockName = bemto_chain[bemto_chain.length-1]\n	!= renderBlock(blockName, data)\nif _bemto_chain\n	- bemto_chain = _bemto_chain\n	- bemto_chain_contexts = _bemto_chain_contexts\n	- bemto_regex_element = _bemto_regex_element\n\n";

// Helper
function getStreamFromBuffer(string) {
    var stream = new Stream.Readable();
    stream._read = function() {
        stream.push(new Buffer(string));
        stream._read = stream.push.bind(stream, null);
    };
    return stream;
}

// Проверка наличия строки в буфере
function stringMatches(str, search) {
    if (typeof search === 'string') {
        return (str.indexOf(search) !== -1) ? search : false;
    }
    if (search instanceof RegExp) {
        return (str.match(search)) ? search : false;
    }

    for (var i = 0; i < search.length; i++) {
        if (stringMatches(str, search[i])) {
            return search[i];
        }
    }

    return false;
}

module.exports = function(prepend) {
    var stream = new Stream.Transform({
        objectMode: true
    });

    stream._transform = function(file, enc, cb) {
        if (file.isNull()) {
            return cb(null, file);
        }

        if (typeof prepend != 'string') {
            prepend = BEM_CONTENT;
        }

        var prependedBuffer = new Buffer(prepend);

        if (file.isStream()) {
            return cb(new gutil.PluginError('gulp-template', 'Streaming not supported'));;
        }

        var found = stringMatches(file.contents.toString(enc), extString);

        if (!found) {
            file.contents = Buffer.concat([prependedBuffer, file.contents],
                prependedBuffer.length + file.contents.length);
        }
        cb(null, file);
    };

    return stream;
};
