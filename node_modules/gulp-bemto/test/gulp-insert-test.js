var bemto  = require('../'),
    expect = require('chai').expect,
    File   = require('gulp-util').File
    Stream = require('readable-stream');


// Helper
function getStreamFromBuffer(string) {
    var stream = new Stream.Readable();
    stream._read = function() {
        stream.push(new Buffer(string));
        stream._read = stream.push.bind(stream, null);
    };
    return stream;
}

describe('Bemto', function() {
    it('1. let pass null files through', function(done) {
        var stream = bemto();

        var fakeFile = new File({
            cwd: __dirname,
            base: __dirname + 'test',
            path: __dirname + 'test/file.js',
            contents: null
        });

        stream.on('data', function(file) {
            expect(file.contents).to.be.equal(null);
            done();
        });

        stream.write(fakeFile);
        stream.end();
    });

    it('2. let pass in buffer mode', function(done) {
        var stream = bemto('Hello');

        var fakeFile = new File({
            cwd: __dirname,
            base: __dirname + 'test',
            path: __dirname + 'test/file.js',
            contents: new Buffer(' world')
        });

        stream.on('data', function(file) {
            expect(file.contents.toString()).to.be.equal('Hello world');
            done();
        });

        stream.write(fakeFile);
        stream.end();
    });


    it('3. let pass in buffer mode with stop string', function(done) {
        var stream = bemto('Hello');

        var fakeFile = new File({
            cwd: __dirname,
            base: __dirname + 'test',
            path: __dirname + 'test/file.js',
            contents: new Buffer('extends world')
        });

        stream.on('data', function(file) {
            expect(file.contents.toString()).to.be.equal('extends world');
            done();
        });

        stream.write(fakeFile);
        stream.end();
    });



});
